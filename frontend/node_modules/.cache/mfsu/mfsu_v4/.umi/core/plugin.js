"use strict";
import * as Plugin_0 from "@@/core/helmet.ts";
import * as Plugin_1 from "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-access/runtime.tsx";
import * as Plugin_2 from "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-initialState/runtime.tsx";
import * as Plugin_3 from "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-layout/runtime.tsx";
import * as Plugin_4 from "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-model/runtime.tsx";
import { PluginManager } from "umi";
function __defaultExport(obj) {
  if (obj.default) {
    return typeof obj.default === "function" ? obj.default() : obj.default;
  }
  return obj;
}
export function getPlugins() {
  return [
    {
      apply: Plugin_0,
      path: false ? void 0 : "@@/core/helmet.ts"
    },
    {
      apply: Plugin_1,
      path: false ? void 0 : "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-access/runtime.tsx"
    },
    {
      apply: Plugin_2,
      path: false ? void 0 : "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-initialState/runtime.tsx"
    },
    {
      apply: Plugin_3,
      path: false ? void 0 : "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-layout/runtime.tsx"
    },
    {
      apply: Plugin_4,
      path: false ? void 0 : "/Users/hiyenwong/projects/PycharmProjects/openai/rag_ui_ant_design/frontend/src/.umi/plugin-model/runtime.tsx"
    }
  ];
}
export function getValidKeys() {
  return ["patchRoutes", "patchClientRoutes", "modifyContextOpts", "modifyClientRenderOpts", "rootContainer", "innerProvider", "i18nProvider", "accessProvider", "dataflowProvider", "outerProvider", "render", "onRouteChange", "antd", "getInitialState", "layout", "request"];
}
let pluginManager = null;
export function createPluginManager() {
  pluginManager = PluginManager.create({
    plugins: getPlugins(),
    validKeys: getValidKeys()
  });
  return pluginManager;
}
export function getPluginManager() {
  return pluginManager;
}
