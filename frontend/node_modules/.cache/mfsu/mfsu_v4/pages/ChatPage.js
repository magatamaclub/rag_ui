"use strict";
import { jsx, jsxs } from "react/jsx-runtime";
import { useState, useRef, useEffect } from "react";
import { Layout, Menu, Input, Button, List, Avatar, Card, Space } from "antd";
import { SendOutlined, PlusOutlined, MessageOutlined } from "@ant-design/icons";
const { Sider, Content } = Layout;
const { TextArea } = Input;
const ChatPage = () => {
  const [conversations, setConversations] = useState(() => {
    const savedConversations = localStorage.getItem("chatConversations");
    return savedConversations ? JSON.parse(savedConversations) : [
      { id: "1", title: "New Chat 1", messages: [] }
    ];
  });
  const [currentConversationId, setCurrentConversationId] = useState(() => {
    const savedCurrentConversationId = localStorage.getItem("currentChatConversationId");
    return savedCurrentConversationId || "1";
  });
  const [inputMessage, setInputMessage] = useState("");
  const messagesEndRef = useRef(null);
  const currentConversation = conversations.find((conv) => conv.id === currentConversationId);
  useEffect(() => {
    localStorage.setItem("chatConversations", JSON.stringify(conversations));
    localStorage.setItem("currentChatConversationId", currentConversationId);
  }, [conversations, currentConversationId]);
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };
  useEffect(() => {
    scrollToBottom();
  }, [currentConversation?.messages]);
  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;
    const newMessage = { id: Date.now().toString(), sender: "user", text: inputMessage };
    const updatedConversations = conversations.map(
      (conv) => conv.id === currentConversationId ? { ...conv, messages: [...conv.messages, newMessage], retrieverResults: [] } : conv
    );
    setConversations(updatedConversations);
    setInputMessage("");
    const botMessagePlaceholder = { id: Date.now().toString() + "-bot", sender: "bot", text: "" };
    setConversations((prev) => prev.map(
      (conv) => conv.id === currentConversationId ? { ...conv, messages: [...conv.messages, botMessagePlaceholder] } : conv
    ));
    try {
      const response = await fetch("/api/v1/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          query: newMessage.text,
          conversation_id: currentConversationId
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let botResponseText = "";
      let currentRetrieverResults = [];
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split("\n").filter((line) => line.startsWith("data:"));
        for (const line of lines) {
          try {
            const data = JSON.parse(line.substring(5));
            if (data.event === "text_chunk") {
              botResponseText += data.answer;
              setConversations((prev) => prev.map(
                (conv) => conv.id === currentConversationId ? { ...conv, messages: conv.messages.map(
                  (msg) => msg.id === botMessagePlaceholder.id ? { ...msg, text: botResponseText } : msg
                ) } : conv
              ));
            } else if (data.event === "llm_end") {
              if (data.answer && data.answer.length > botResponseText.length) {
                botResponseText = data.answer;
                setConversations((prev) => prev.map(
                  (conv) => conv.id === currentConversationId ? { ...conv, messages: conv.messages.map(
                    (msg) => msg.id === botMessagePlaceholder.id ? { ...msg, text: botResponseText } : msg
                  ) } : conv
                ));
              }
            } else if (data.event === "retriever_result") {
              currentRetrieverResults = data.retriever_results.map((res) => ({
                id: res.id,
                content: res.content,
                metadata: res.metadata
              }));
              setConversations((prev) => prev.map(
                (conv) => conv.id === currentConversationId ? { ...conv, retrieverResults: currentRetrieverResults } : conv
              ));
            }
          } catch (e) {
            console.error("Error parsing Dify stream chunk:", e, "Chunk:", line);
          }
        }
      }
    } catch (error) {
      console.error("Error sending message:", error);
      setConversations((prev) => prev.map(
        (conv) => conv.id === currentConversationId ? { ...conv, messages: conv.messages.map(
          (msg) => msg.id === botMessagePlaceholder.id ? { ...msg, text: `Error: ${error}` } : msg
        ) } : conv
      ));
    }
  };
  const handleNewChat = () => {
    const newId = (conversations.length + 1).toString();
    const newConversation = { id: newId, title: `New Chat ${newId}`, messages: [], retrieverResults: [] };
    setConversations([...conversations, newConversation]);
    setCurrentConversationId(newId);
  };
  return /* @__PURE__ */ jsxs(Layout, { style: { minHeight: "100vh" }, children: [
    /* @__PURE__ */ jsxs(Sider, { width: 250, theme: "light", style: { borderRight: "1px solid #f0f0f0" }, children: [
      /* @__PURE__ */ jsx("div", { style: { padding: "16px", textAlign: "center" }, children: /* @__PURE__ */ jsx(Button, { type: "primary", icon: /* @__PURE__ */ jsx(PlusOutlined, {}), block: true, onClick: handleNewChat, children: "New Chat" }) }),
      /* @__PURE__ */ jsx(
        Menu,
        {
          mode: "inline",
          selectedKeys: [currentConversationId],
          onClick: ({ key }) => setCurrentConversationId(key),
          style: { borderRight: 0 },
          children: conversations.map((conv) => /* @__PURE__ */ jsx(Menu.Item, { icon: /* @__PURE__ */ jsx(MessageOutlined, {}), children: conv.title }, conv.id))
        }
      )
    ] }),
    /* @__PURE__ */ jsx(Layout, { children: /* @__PURE__ */ jsxs(Content, { style: { padding: "24px", background: "#fff", display: "flex", flexDirection: "column" }, children: [
      /* @__PURE__ */ jsxs("div", { style: { flexGrow: 1, overflowY: "auto", paddingRight: "24px" }, children: [
        /* @__PURE__ */ jsx(
          List,
          {
            itemLayout: "horizontal",
            dataSource: currentConversation?.messages || [],
            renderItem: (msg) => /* @__PURE__ */ jsx(List.Item, { style: { justifyContent: msg.sender === "user" ? "flex-end" : "flex-start" }, children: /* @__PURE__ */ jsx(
              List.Item.Meta,
              {
                avatar: /* @__PURE__ */ jsx(Avatar, { src: msg.sender === "user" ? "https://api.dicebear.com/7.x/initials/svg?seed=User" : "https://api.dicebear.com/7.x/initials/svg?seed=Bot" }),
                title: msg.sender === "user" ? "You" : "Bot",
                description: /* @__PURE__ */ jsx(Card, { style: { maxWidth: "70%", background: msg.sender === "user" ? "#e6f7ff" : "#f0f0f0" }, children: msg.text }),
                style: { flexDirection: msg.sender === "user" ? "row-reverse" : "row" }
              }
            ) })
          }
        ),
        /* @__PURE__ */ jsx("div", { ref: messagesEndRef })
      ] }),
      /* @__PURE__ */ jsx("div", { style: { padding: "16px 0", borderTop: "1px solid #f0f0f0" }, children: /* @__PURE__ */ jsxs(Space.Compact, { style: { width: "100%" }, children: [
        /* @__PURE__ */ jsx(
          TextArea,
          {
            value: inputMessage,
            onChange: (e) => setInputMessage(e.target.value),
            placeholder: "Type your message here...",
            autoSize: { minRows: 1, maxRows: 5 },
            onPressEnter: (e) => {
              if (!e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
              }
            }
          }
        ),
        /* @__PURE__ */ jsx(Button, { type: "primary", icon: /* @__PURE__ */ jsx(SendOutlined, {}), onClick: handleSendMessage, children: "Send" })
      ] }) })
    ] }) }),
    /* @__PURE__ */ jsxs(Sider, { width: 300, theme: "light", style: { borderLeft: "1px solid #f0f0f0", padding: "16px" }, children: [
      /* @__PURE__ */ jsx("h3", { children: "Knowledge Sources" }),
      currentConversation?.retrieverResults && currentConversation.retrieverResults.length > 0 ? /* @__PURE__ */ jsx(
        List,
        {
          dataSource: currentConversation.retrieverResults,
          renderItem: (item) => /* @__PURE__ */ jsx(List.Item, { children: /* @__PURE__ */ jsxs(Card, { size: "small", title: item.metadata.title || `Source ${item.id}`, style: { width: "100%" }, children: [
            /* @__PURE__ */ jsx("p", { children: item.content }),
            item.metadata.url && /* @__PURE__ */ jsx("a", { href: item.metadata.url, target: "_blank", rel: "noopener noreferrer", children: "Read More" })
          ] }) })
        }
      ) : /* @__PURE__ */ jsx("p", { children: "Relevant document snippets will appear here." })
    ] })
  ] });
};
export default ChatPage;
